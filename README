Based on the project requirements

1. **Each Docker image must have the same name as its corresponding service**: 
    ✔️ docker-compose.yml file specifies service names, and Dockerfiles correspond to these services, ensuring consistency.

2. **Each service has to run in a dedicated container**: 
    ✔️ Each service in docker-compose.yml file is defined separately, ensuring that each runs in its own container

3. **Containers must be built either from the penultimate stable version of Alpine or Debian**: 
    ✔️ specified Alpine in Dockerfiles, which complies with this requirement

4. **You must write your own Dockerfiles**: 
    ✔️ provided custom Dockerfiles for each service

5. **It is forbidden to pull ready-made Docker images**: 
    ✔️ didn't pull ready-made Docker images, and instead, built images from Dockerfiles

6. **Set up NGINX with TLSv1.2 or TLSv1.3 only**: 
    ✔️ configured NGINX in docker-compose.yml file to use port 443 with TLSv1.2 or TLSv1.3

7. **Set up WordPress + php-fpm and MariaDB in separate containers**: 
    ✔️ defined separate services for WordPress + php-fpm and MariaDB in docker-compose.yml

8. **Volumes for WordPress database and website files**: 
    ✔️ specified volumes for WordPress database and website files in docker-compose.yml

9. **Establish a docker-network**: 
    ✔️ defined a docker-network in docker-compose.yml

10. **Containers must restart in case of a crash**: 
    ✔️ didn't specify a command that runs an infinite loop, ensuring that containers can restart in case of a crash
        - In Docker, by default, containers automatically restart unless explicitly stopped or removed.
        - there isn't any explicit command or entrypoint that would cause the container to terminate.
            Instead, the scripts initialize the services and keep them running.
            Therefore, Docker will handle the container restart behavior as expected.
            
11. **Users in WordPress database**: 
    ✔️ entrypoint script for WordPress creates two users as required, one being the administrator.(admin & author)

12. **Use of environment variables**: 
    ✔️ used environment variables in Dockerfiles and docker-compose.yml file

13. **Use a .env file to store environment variables**: 
    ✔️ provided a .env file, storing environment variables.

14. **NGINX container as the only entrypoint via port 443 with TLSv1.2 or TLSv1.3**: 
    ✔️ NGINX container is set up to listen on port 443 with TLSv1.2 or TLSv1.3

Virtual Machine Setup:

 Set up the project in a virtual machine environment.
 Usage of Docker Compose:

 Utilize Docker Compose for managing the infrastructure.
 Image and Service Naming:

 Ensure each Docker image has the same name as its corresponding service.
 Service Isolation:

 Run each service in a dedicated container.
 Base Image Selection:

 Choose either the penultimate stable version of Alpine or Debian for building container images.
 Custom Dockerfiles:

 Write custom Dockerfiles for each service.
 Dockerfiles must be named accordingly and called in docker-compose.yml by the Makefile.
 Building Custom Docker Images:

 Build Docker images for the project services.
 Prohibited from pulling ready-made Docker images or using DockerHub services for this purpose.
 Service Configuration:

 Set up a Docker container with NGINX supporting TLSv1.2 or TLSv1.3 only.
 Configure NGINX to act as a reverse proxy for WordPress and MariaDB services.
 WordPress and php-fpm Container:

 Create a Docker container with WordPress and php-fpm installed and configured, excluding NGINX.
 MariaDB Container:

 Create a Docker container with MariaDB installed and configured, excluding NGINX.
 Volume Configuration:

 Set up a volume to store the WordPress database.
 Set up a second volume to store the WordPress website files.
 Docker Network Setup:

 Establish a Docker network to facilitate communication between containers.
 Automatic Restart:

 Ensure containers restart automatically in case of a crash.
 Avoid Hacky Solutions:

 Avoid using hacky solutions like tail -f for running Docker containers.
 Understand how daemons work and choose appropriate methods for container management.
 
WordPress Database Users:

 Create two users in the WordPress database.
 Ensure one of them is an administrator.
 The administrator's username must not contain "admin" or "administrator".
 Volumes Configuration:

 Volumes should be available in the /home/login/data folder of the host machine using Docker.
 Replace "login" with your own login username.
 Domain Name Configuration:

 Configure your domain name to point to your local IP address.
 The domain name must be login.42.fr, where "login" is replaced with your own login.
 Docker Image Tags:

 Ensure that the latest tag is prohibited.
 No Passwords in Dockerfiles:

 Remove any passwords from Dockerfiles.
 Use of Environment Variables:

 Mandatory use of environment variables.
 Store environment variables in a .env file located at the root of the srcs directory.
 NGINX Container Configuration:

 NGINX container must be the only entry point into the infrastructure via port 443.
 Use TLSv1.2 or TLSv1.3 protocol for secure communication.